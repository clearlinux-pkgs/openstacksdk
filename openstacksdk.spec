#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
#
# Source0 file verified with key 0x4F398DEAE440091C (infra-root@openstack.org)
#
Name     : openstacksdk
Version  : 0.41.0
Release  : 66
URL      : https://tarballs.openstack.org/openstacksdk/openstacksdk-0.41.0.tar.gz
Source0  : https://tarballs.openstack.org/openstacksdk/openstacksdk-0.41.0.tar.gz
Source1  : https://tarballs.openstack.org/openstacksdk/openstacksdk-0.41.0.tar.gz.asc
Summary  : An SDK for building applications to work with OpenStack
Group    : Development/Tools
License  : Apache-2.0
Requires: openstacksdk-bin = %{version}-%{release}
Requires: openstacksdk-license = %{version}-%{release}
Requires: openstacksdk-python = %{version}-%{release}
Requires: openstacksdk-python3 = %{version}-%{release}
Requires: PyYAML
Requires: appdirs
Requires: cryptography
Requires: decorator
Requires: dogpile.cache
Requires: ipaddress
Requires: iso8601
Requires: jmespath
Requires: jsonpatch
Requires: keystoneauth1
Requires: munch
Requires: netifaces
Requires: os-service-types
Requires: pbr
Requires: requestsexceptions
Requires: six
BuildRequires : PyYAML
BuildRequires : appdirs
BuildRequires : buildreq-distutils3
BuildRequires : cryptography
BuildRequires : decorator
BuildRequires : dogpile.cache
BuildRequires : ipaddress
BuildRequires : iso8601
BuildRequires : jmespath
BuildRequires : jsonpatch
BuildRequires : keystoneauth1
BuildRequires : munch
BuildRequires : netifaces
BuildRequires : os-service-types
BuildRequires : pbr
BuildRequires : requestsexceptions
BuildRequires : six

%description
openstacksdk
============

openstacksdk is a client library for building applications to work
with OpenStack clouds. The project aims to provide a consistent and
complete set of interactions with OpenStack's many services, along with
complete documentation, examples, and tools.

It also contains an abstraction interface layer. Clouds can do many things, but
there are probably only about 10 of them that most people care about with any
regularity. If you want to do complicated things, the per-service oriented
portions of the SDK are for you. However, if what you want is to be able to
write an application that talks to clouds no matter what crazy choices the
deployer has made in an attempt to be more hipster than their self-entitled
narcissist peers, then the Cloud Abstraction layer is for you.

More information about its history can be found at
https://docs.openstack.org/openstacksdk/latest/contributor/history.html

openstack
=========

List servers using objects configured with the ``clouds.yaml`` file:

.. code-block:: python

    import openstack

    # Initialize and turn on debug logging
    openstack.enable_logging(debug=True)

    # Initialize cloud
    conn = openstack.connect(cloud='mordred')

    for server in conn.compute.servers():
        print(server.to_dict())

Cloud Layer
===========

``openstacksdk`` contains a higher-level layer based on logical operations.

.. code-block:: python

    import openstack

    # Initialize and turn on debug logging
    openstack.enable_logging(debug=True)

    for server in conn.list_servers():
        print(server.to_dict())

The benefit is mostly seen in more complicated operations that take multiple
steps and where the steps vary across providers:

.. code-block:: python

    import openstack

    # Initialize and turn on debug logging
    openstack.enable_logging(debug=True)

    # Initialize connection
    # Cloud configs are read with openstack.config
    conn = openstack.connect(cloud='mordred')

    # Upload an image to the cloud
    image = conn.create_image(
        'ubuntu-trusty', filename='ubuntu-trusty.qcow2', wait=True)

    # Find a flavor with at least 512M of RAM
    flavor = conn.get_flavor_by_ram(512)

    # Boot a server, wait for it to boot, and then do whatever is needed
    # to get a public ip for it.
    conn.create_server(
        'my-server', image=image, flavor=flavor, wait=True, auto_ip=True)

openstack.config
================

``openstack.config`` will find cloud configuration for as few as 1 clouds and
as many as you want to put in a config file. It will read environment variables
and config files, and it also contains some vendor specific default values so
that you don't have to know extra info to use OpenStack

* If you have a config file, you will get the clouds listed in it
* If you have environment variables, you will get a cloud named `envvars`
* If you have neither, you will get a cloud named `defaults` with base defaults

Sometimes an example is nice.

Create a ``clouds.yaml`` file:

.. code-block:: yaml

     clouds:
      mordred:
        region_name: Dallas
        auth:
          username: 'mordred'
          password: XXXXXXX
          project_name: 'shade'
          auth_url: 'https://identity.example.com'

Please note: ``openstack.config`` will look for a file called ``clouds.yaml``
in the following locations:

* Current Directory
* ``~/.config/openstack``
* ``/etc/openstack``

More information at https://docs.openstack.org/openstacksdk/latest/user/config/configuration.html

Links
=====

* `Issue Tracker <https://storyboard.openstack.org/#!/project/openstack/openstacksdk>`_
* `Code Review <https://review.opendev.org/#/q/status:open+project:openstack/openstacksdk,n,z>`_
* `Documentation <https://docs.openstack.org/openstacksdk/latest/>`_
* `PyPI <https://pypi.org/project/openstacksdk/>`_
* `Mailing list <http://lists.openstack.org/cgi-bin/mailman/listinfo/openstack-discuss>`_
* `Release Notes <https://docs.openstack.org/releasenotes/openstacksdk>`_

%package bin
Summary: bin components for the openstacksdk package.
Group: Binaries
Requires: openstacksdk-license = %{version}-%{release}

%description bin
bin components for the openstacksdk package.


%package license
Summary: license components for the openstacksdk package.
Group: Default

%description license
license components for the openstacksdk package.


%package python
Summary: python components for the openstacksdk package.
Group: Default
Requires: openstacksdk-python3 = %{version}-%{release}

%description python
python components for the openstacksdk package.


%package python3
Summary: python3 components for the openstacksdk package.
Group: Default
Requires: python3-core
Provides: pypi(openstacksdk)

%description python3
python3 components for the openstacksdk package.


%prep
%setup -q -n openstacksdk-0.41.0
cd %{_builddir}/openstacksdk-0.41.0

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C.UTF-8
export SOURCE_DATE_EPOCH=1583192741
# -Werror is for werrorists
export GCC_IGNORE_WERROR=1
export AR=gcc-ar
export RANLIB=gcc-ranlib
export NM=gcc-nm
export CFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export FCFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export FFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export CXXFLAGS="$CXXFLAGS -O3 -ffat-lto-objects -flto=4 "
export MAKEFLAGS=%{?_smp_mflags}
python3 setup.py build

%install
export MAKEFLAGS=%{?_smp_mflags}
rm -rf %{buildroot}
mkdir -p %{buildroot}/usr/share/package-licenses/openstacksdk
cp %{_builddir}/openstacksdk-0.41.0/LICENSE %{buildroot}/usr/share/package-licenses/openstacksdk/57aed0b0f74e63f6b85cce11bce29ba1710b422b
python3 -tt setup.py build  install --root=%{buildroot}
echo ----[ mark ]----
cat %{buildroot}/usr/lib/python3*/site-packages/*/requires.txt || :
echo ----[ mark ]----

%files
%defattr(-,root,root,-)

%files bin
%defattr(-,root,root,-)
/usr/bin/openstack-inventory

%files license
%defattr(0644,root,root,0755)
/usr/share/package-licenses/openstacksdk/57aed0b0f74e63f6b85cce11bce29ba1710b422b

%files python
%defattr(-,root,root,-)

%files python3
%defattr(-,root,root,-)
/usr/lib/python3*/*
